{"version":3,"sources":["components/calculator.js","shared/touchpadNumbers.js","shared/touchpadOperations.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","state","input","output","reset","handleAddNumber","bind","handleClear","handleDecimal","handleOperator","evaluate","this","setState","event","value","target","innerText","test","operator","toString","replace","final","eval","touchpadNumbersRendered","touchpadNumbers","map","x","id","className","key","onClick","touchpadOperationsRendered","touchpadOperations","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abe350c6.chunk.js","sourcesContent":["import React, {Component} from 'react' ; \r\nimport {touchpadNumbers} from '../shared/touchpadNumbers';\r\nimport {touchpadOperations} from '../shared/touchpadOperations';\r\n\r\nclass Calculator extends Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tinput : '',\r\n\t\t\toutput : 0,\r\n\t\t\treset: false\r\n\t\t}\r\n\r\n\t\tthis.handleAddNumber=this.handleAddNumber.bind(this);\r\n\t\tthis.handleClear=this.handleClear.bind(this);\r\n\t\tthis.handleDecimal=this.handleDecimal.bind(this);\r\n\t\tthis.handleOperator=this.handleOperator.bind(this);\r\n\t\tthis.evaluate=this.evaluate.bind(this);\r\n\t};\r\n\r\n\thandleClear(){\r\n\t\tthis.setState({\r\n\t\t\tinput:'',\r\n\t\t\toutput:0,\r\n\t\t\treset:false\r\n\t\t});\r\n\t};\r\n\r\n\thandleAddNumber(event){\r\n\t\tconst value = event.target.innerText ; \r\n\t\t//handle reset case\r\n\t\tif (this.state.reset && value !=='0') {\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput:value,\r\n\t\t\t\toutput:0,\r\n\t\t\t\treset:false\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if (!(value==='0' && this.state.input==='')) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput:this.state.input + value,\r\n\t\t\t\treset:false\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n\r\n\thandleDecimal(event){\r\n\t\tif (!/\\.[0-9]*$/.test(this.state.input)){\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput:this.state.input + \".\",\r\n\t\t\t\treset:false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\thandleOperator(event){\r\n\t\tconst input = this.state.input;\r\n\t\tlet operator = event.target.innerText;\r\n\r\n\t\tif (this.state.reset){\r\n\t\t\tthis.setState({\r\n\t\t\t\treset:false\r\n\t\t\t})\r\n\t\t}\r\n\t\r\n\t\tif (operator === \"x\") {\r\n\t\t\toperator=\"*\";\r\n\t\t}\r\n\r\n\t\t// if input empty, add operator to output\r\n\t\tif (input === '') {\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput : this.state.output.toString() + operator,\r\n\t\t\t});\r\n\t\t}\r\n\t\t// if no consecutive operator\r\n\t\telse if ((/[0-9.-{1}]$/).test(input)) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput: this.state.input + operator,\r\n\t\t\t})\r\n\t\t}\r\n\t\t// case minus sign\r\n\t\telse if (operator === \"-\" && !(/-$/).test(input)){\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput: this.state.input + operator,\r\n\t\t\t})\r\n\t\t}\r\n\t\t// have only one operator at the end \r\n\t\telse {\r\n\t\t\tthis.setState({\r\n\t\t\t\tinput:this.state.input.replace(/[*+-/]*$/,\"\") + operator,\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n\r\n\tevaluate(){\r\n\t\tconst final = eval(this.state.input.replace(/[*+-/]*$/,\"\"),\"{0:F2}\");\r\n\t\tthis.setState({\r\n\t\t\toutput:final,\r\n\t\t\tinput:final,\r\n\t\t\treset:true\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\r\n\t\tconst touchpadNumbersRendered = touchpadNumbers.map(x => {\r\n\t\t\treturn(\r\n\t\t\t\t<div id={x.id} className=\"number key\" key={x.value} onClick={this.handleAddNumber}>\r\n\t\t\t\t\t{x.value}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\tconst touchpadOperationsRendered = touchpadOperations.map(x => {\r\n\t\t\treturn(\r\n\t\t\t\t<div id={x.id} className=\"operation key\" key={x.value} onClick={this.handleOperator}>\r\n\t\t\t\t\t{x.value}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t});\r\n\t\t\r\n\t\treturn(\r\n\t\t\t<div id=\"calculator\">\r\n\t\t\t\t<div id=\"displayBlock\">\r\n\t\t\t\t\t<p id=\"display\">{this.state.input==='' ? 0 : this.state.input}</p>\r\n\t\t\t\t\t<p id=\"output\">{this.state.output}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"touchpad\">\r\n\t\t\t\t\t<div id=\"inputElementsMain\">\r\n\t\t\t\t\t\t<div id=\"clear\" className=\"key\" onClick={this.handleClear}>\r\n\t\t\t\t\t\t\tAC\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{touchpadNumbersRendered}\r\n\t\t\t\t\t\t<div id=\"decimal\"  className=\"key\" onClick={this.handleDecimal}>\r\n\t\t\t\t\t\t\t.\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id=\"inputElementsOps\">\r\n\t\t\t\t\t\t{touchpadOperationsRendered}\r\n\t\t\t\t\t\t<div id=\"equals\" className=\"key\" onClick={this.evaluate}>\r\n\t\t\t\t\t\t\t=\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\n\r\nexport default Calculator;","export const touchpadNumbers=[\r\n\t{\r\n\t\tid:\"seven\",\r\n\t\tvalue:7\r\n\t},\r\n\t{\r\n\t\tid:\"eight\",\r\n\t\tvalue:8\r\n\t},\r\n\t{\r\n\t\tid:\"nine\",\r\n\t\tvalue:9\r\n\t},\r\n\t{\r\n\t\tid:\"four\",\r\n\t\tvalue:4\r\n\t},\r\n\t{\r\n\t\tid:\"five\",\r\n\t\tvalue:5\r\n\t},\r\n\t{\r\n\t\tid:\"six\",\r\n\t\tvalue:6\r\n\t},\r\n\t{\r\n\t\tid:\"one\",\r\n\t\tvalue:1\r\n\t},\r\n\t{\r\n\t\tid:\"two\",\r\n\t\tvalue:2\r\n\t},\r\n\t{\r\n\t\tid:\"three\",\r\n\t\tvalue:3\r\n\t},\r\n\t{\r\n\t\tid:\"zero\",\r\n\t\tvalue:0\r\n\t}\r\n];","export const touchpadOperations=[\r\n\t{\r\n\t\tid:\"divide\",\r\n\t\tvalue:\"/\"\r\n\t},\r\n\t{\r\n\t\tid:\"multiply\",\r\n\t\tvalue:\"x\"\r\n\t},\r\n\t{\r\n\t\tid:\"subtract\",\r\n\t\tvalue:\"-\"\r\n\t},\r\n\t{\r\n\t\tid:\"add\",\r\n\t\tvalue:\"+\"\r\n\t}\r\n];","import React from 'react';\nimport './App.css';\nimport Calculator from \"./components/calculator\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}